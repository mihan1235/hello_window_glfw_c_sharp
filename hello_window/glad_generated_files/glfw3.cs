//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class glfw3 {
  public static int glfwInit() {
    int ret = glfw3PINVOKE.glfwInit();
    return ret;
  }

  public static void glfwTerminate() {
    glfw3PINVOKE.glfwTerminate();
  }

  public static void glfwInitHint(int hint, int value) {
    glfw3PINVOKE.glfwInitHint(hint, value);
  }

  public static void glfwInitHintString(int hint, string value) {
    glfw3PINVOKE.glfwInitHintString(hint, value);
  }

  public static void glfwGetVersion(SWIGTYPE_p_int major, SWIGTYPE_p_int minor, SWIGTYPE_p_int rev) {
    glfw3PINVOKE.glfwGetVersion(SWIGTYPE_p_int.getCPtr(major), SWIGTYPE_p_int.getCPtr(minor), SWIGTYPE_p_int.getCPtr(rev));
  }

  public static string glfwGetVersionString() {
    string ret = glfw3PINVOKE.glfwGetVersionString();
    return ret;
  }

  public static int glfwGetError(SWIGTYPE_p_p_char description) {
    int ret = glfw3PINVOKE.glfwGetError(SWIGTYPE_p_p_char.getCPtr(description));
    return ret;
  }

  public static SWIGTYPE_p_f_int_p_q_const__char__void glfwSetErrorCallback(SWIGTYPE_p_f_int_p_q_const__char__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetErrorCallback(SWIGTYPE_p_f_int_p_q_const__char__void.getCPtr(cbfun));
    SWIGTYPE_p_f_int_p_q_const__char__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_int_p_q_const__char__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_p_GLFWmonitor glfwGetMonitors(SWIGTYPE_p_int count) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetMonitors(SWIGTYPE_p_int.getCPtr(count));
    SWIGTYPE_p_p_GLFWmonitor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_GLFWmonitor(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_GLFWmonitor glfwGetPrimaryMonitor() {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetPrimaryMonitor();
    SWIGTYPE_p_GLFWmonitor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GLFWmonitor(cPtr, false);
    return ret;
  }

  public static void glfwGetMonitorPos(SWIGTYPE_p_GLFWmonitor monitor, SWIGTYPE_p_int xpos, SWIGTYPE_p_int ypos) {
    glfw3PINVOKE.glfwGetMonitorPos(SWIGTYPE_p_GLFWmonitor.getCPtr(monitor), SWIGTYPE_p_int.getCPtr(xpos), SWIGTYPE_p_int.getCPtr(ypos));
  }

  public static void glfwGetMonitorPhysicalSize(SWIGTYPE_p_GLFWmonitor monitor, SWIGTYPE_p_int widthMM, SWIGTYPE_p_int heightMM) {
    glfw3PINVOKE.glfwGetMonitorPhysicalSize(SWIGTYPE_p_GLFWmonitor.getCPtr(monitor), SWIGTYPE_p_int.getCPtr(widthMM), SWIGTYPE_p_int.getCPtr(heightMM));
  }

  public static string glfwGetMonitorName(SWIGTYPE_p_GLFWmonitor monitor) {
    string ret = glfw3PINVOKE.glfwGetMonitorName(SWIGTYPE_p_GLFWmonitor.getCPtr(monitor));
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWmonitor_int__void glfwSetMonitorCallback(SWIGTYPE_p_f_p_struct_GLFWmonitor_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetMonitorCallback(SWIGTYPE_p_f_p_struct_GLFWmonitor_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWmonitor_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWmonitor_int__void(cPtr, false);
    return ret;
  }

  public static GLFWvidmode glfwGetVideoModes(SWIGTYPE_p_GLFWmonitor monitor, SWIGTYPE_p_int count) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetVideoModes(SWIGTYPE_p_GLFWmonitor.getCPtr(monitor), SWIGTYPE_p_int.getCPtr(count));
    GLFWvidmode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GLFWvidmode(cPtr, false);
    return ret;
  }

  public static GLFWvidmode glfwGetVideoMode(SWIGTYPE_p_GLFWmonitor monitor) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetVideoMode(SWIGTYPE_p_GLFWmonitor.getCPtr(monitor));
    GLFWvidmode ret = (cPtr == global::System.IntPtr.Zero) ? null : new GLFWvidmode(cPtr, false);
    return ret;
  }

  public static void glfwSetGamma(SWIGTYPE_p_GLFWmonitor monitor, float gamma) {
    glfw3PINVOKE.glfwSetGamma(SWIGTYPE_p_GLFWmonitor.getCPtr(monitor), gamma);
  }

  public static GLFWgammaramp glfwGetGammaRamp(SWIGTYPE_p_GLFWmonitor monitor) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetGammaRamp(SWIGTYPE_p_GLFWmonitor.getCPtr(monitor));
    GLFWgammaramp ret = (cPtr == global::System.IntPtr.Zero) ? null : new GLFWgammaramp(cPtr, false);
    return ret;
  }

  public static void glfwSetGammaRamp(SWIGTYPE_p_GLFWmonitor monitor, GLFWgammaramp ramp) {
    glfw3PINVOKE.glfwSetGammaRamp(SWIGTYPE_p_GLFWmonitor.getCPtr(monitor), GLFWgammaramp.getCPtr(ramp));
  }

  public static void glfwDefaultWindowHints() {
    glfw3PINVOKE.glfwDefaultWindowHints();
  }

  public static void glfwWindowHint(int hint, int value) {
    glfw3PINVOKE.glfwWindowHint(hint, value);
  }

  public static SWIGTYPE_p_GLFWwindow glfwCreateWindow(int width, int height, string title, SWIGTYPE_p_GLFWmonitor monitor, SWIGTYPE_p_GLFWwindow share) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwCreateWindow(width, height, title, SWIGTYPE_p_GLFWmonitor.getCPtr(monitor), SWIGTYPE_p_GLFWwindow.getCPtr(share));
    SWIGTYPE_p_GLFWwindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GLFWwindow(cPtr, false);
    return ret;
  }

  public static void glfwDestroyWindow(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwDestroyWindow(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static int glfwWindowShouldClose(SWIGTYPE_p_GLFWwindow window) {
    int ret = glfw3PINVOKE.glfwWindowShouldClose(SWIGTYPE_p_GLFWwindow.getCPtr(window));
    return ret;
  }

  public static void glfwSetWindowShouldClose(SWIGTYPE_p_GLFWwindow window, int value) {
    glfw3PINVOKE.glfwSetWindowShouldClose(SWIGTYPE_p_GLFWwindow.getCPtr(window), value);
  }

  public static void glfwSetWindowTitle(SWIGTYPE_p_GLFWwindow window, string title) {
    glfw3PINVOKE.glfwSetWindowTitle(SWIGTYPE_p_GLFWwindow.getCPtr(window), title);
  }

  public static void glfwSetWindowIcon(SWIGTYPE_p_GLFWwindow window, int count, GLFWimage images) {
    glfw3PINVOKE.glfwSetWindowIcon(SWIGTYPE_p_GLFWwindow.getCPtr(window), count, GLFWimage.getCPtr(images));
  }

  public static void glfwGetWindowPos(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_int xpos, SWIGTYPE_p_int ypos) {
    glfw3PINVOKE.glfwGetWindowPos(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_int.getCPtr(xpos), SWIGTYPE_p_int.getCPtr(ypos));
  }

  public static void glfwSetWindowPos(SWIGTYPE_p_GLFWwindow window, int xpos, int ypos) {
    glfw3PINVOKE.glfwSetWindowPos(SWIGTYPE_p_GLFWwindow.getCPtr(window), xpos, ypos);
  }

  public static void glfwGetWindowSize(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_int width, SWIGTYPE_p_int height) {
    glfw3PINVOKE.glfwGetWindowSize(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height));
  }

  public static void glfwSetWindowSizeLimits(SWIGTYPE_p_GLFWwindow window, int minwidth, int minheight, int maxwidth, int maxheight) {
    glfw3PINVOKE.glfwSetWindowSizeLimits(SWIGTYPE_p_GLFWwindow.getCPtr(window), minwidth, minheight, maxwidth, maxheight);
  }

  public static void glfwSetWindowAspectRatio(SWIGTYPE_p_GLFWwindow window, int numer, int denom) {
    glfw3PINVOKE.glfwSetWindowAspectRatio(SWIGTYPE_p_GLFWwindow.getCPtr(window), numer, denom);
  }

  public static void glfwSetWindowSize(SWIGTYPE_p_GLFWwindow window, int width, int height) {
    glfw3PINVOKE.glfwSetWindowSize(SWIGTYPE_p_GLFWwindow.getCPtr(window), width, height);
  }

  public static void glfwGetFramebufferSize(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_int width, SWIGTYPE_p_int height) {
    glfw3PINVOKE.glfwGetFramebufferSize(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height));
  }

  public static void glfwGetWindowFrameSize(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_int left, SWIGTYPE_p_int top, SWIGTYPE_p_int right, SWIGTYPE_p_int bottom) {
    glfw3PINVOKE.glfwGetWindowFrameSize(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_int.getCPtr(left), SWIGTYPE_p_int.getCPtr(top), SWIGTYPE_p_int.getCPtr(right), SWIGTYPE_p_int.getCPtr(bottom));
  }

  public static void glfwIconifyWindow(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwIconifyWindow(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static void glfwRestoreWindow(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwRestoreWindow(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static void glfwMaximizeWindow(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwMaximizeWindow(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static void glfwShowWindow(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwShowWindow(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static void glfwHideWindow(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwHideWindow(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static void glfwFocusWindow(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwFocusWindow(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static void glfwRequestWindowAttention(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwRequestWindowAttention(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static SWIGTYPE_p_GLFWmonitor glfwGetWindowMonitor(SWIGTYPE_p_GLFWwindow window) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetWindowMonitor(SWIGTYPE_p_GLFWwindow.getCPtr(window));
    SWIGTYPE_p_GLFWmonitor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GLFWmonitor(cPtr, false);
    return ret;
  }

  public static void glfwSetWindowMonitor(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_GLFWmonitor monitor, int xpos, int ypos, int width, int height, int refreshRate) {
    glfw3PINVOKE.glfwSetWindowMonitor(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_GLFWmonitor.getCPtr(monitor), xpos, ypos, width, height, refreshRate);
  }

  public static int glfwGetWindowAttrib(SWIGTYPE_p_GLFWwindow window, int attrib) {
    int ret = glfw3PINVOKE.glfwGetWindowAttrib(SWIGTYPE_p_GLFWwindow.getCPtr(window), attrib);
    return ret;
  }

  public static void glfwSetWindowAttrib(SWIGTYPE_p_GLFWwindow window, int attrib, int value) {
    glfw3PINVOKE.glfwSetWindowAttrib(SWIGTYPE_p_GLFWwindow.getCPtr(window), attrib, value);
  }

  public static void glfwSetWindowUserPointer(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_void pointer) {
    glfw3PINVOKE.glfwSetWindowUserPointer(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_void.getCPtr(pointer));
  }

  public static SWIGTYPE_p_void glfwGetWindowUserPointer(SWIGTYPE_p_GLFWwindow window) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetWindowUserPointer(SWIGTYPE_p_GLFWwindow.getCPtr(window));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void glfwSetWindowPosCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetWindowPosCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void glfwSetWindowSizeCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetWindowSizeCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow__void glfwSetWindowCloseCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetWindowCloseCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow__void glfwSetWindowRefreshCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetWindowRefreshCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int__void glfwSetWindowFocusCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetWindowFocusCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int__void glfwSetWindowIconifyCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetWindowIconifyCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int__void glfwSetWindowMaximizeCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetWindowMaximizeCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void glfwSetFramebufferSizeCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetFramebufferSizeCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int_int__void(cPtr, false);
    return ret;
  }

  public static void glfwPollEvents() {
    glfw3PINVOKE.glfwPollEvents();
  }

  public static void glfwWaitEvents() {
    glfw3PINVOKE.glfwWaitEvents();
  }

  public static void glfwWaitEventsTimeout(double timeout) {
    glfw3PINVOKE.glfwWaitEventsTimeout(timeout);
  }

  public static void glfwPostEmptyEvent() {
    glfw3PINVOKE.glfwPostEmptyEvent();
  }

  public static int glfwGetInputMode(SWIGTYPE_p_GLFWwindow window, int mode) {
    int ret = glfw3PINVOKE.glfwGetInputMode(SWIGTYPE_p_GLFWwindow.getCPtr(window), mode);
    return ret;
  }

  public static void glfwSetInputMode(SWIGTYPE_p_GLFWwindow window, int mode, int value) {
    glfw3PINVOKE.glfwSetInputMode(SWIGTYPE_p_GLFWwindow.getCPtr(window), mode, value);
  }

  public static string glfwGetKeyName(int key, int scancode) {
    string ret = glfw3PINVOKE.glfwGetKeyName(key, scancode);
    return ret;
  }

  public static int glfwGetKeyScancode(int key) {
    int ret = glfw3PINVOKE.glfwGetKeyScancode(key);
    return ret;
  }

  public static int glfwGetKey(SWIGTYPE_p_GLFWwindow window, int key) {
    int ret = glfw3PINVOKE.glfwGetKey(SWIGTYPE_p_GLFWwindow.getCPtr(window), key);
    return ret;
  }

  public static int glfwGetMouseButton(SWIGTYPE_p_GLFWwindow window, int button) {
    int ret = glfw3PINVOKE.glfwGetMouseButton(SWIGTYPE_p_GLFWwindow.getCPtr(window), button);
    return ret;
  }

  public static void glfwGetCursorPos(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_double xpos, SWIGTYPE_p_double ypos) {
    glfw3PINVOKE.glfwGetCursorPos(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_double.getCPtr(xpos), SWIGTYPE_p_double.getCPtr(ypos));
  }

  public static void glfwSetCursorPos(SWIGTYPE_p_GLFWwindow window, double xpos, double ypos) {
    glfw3PINVOKE.glfwSetCursorPos(SWIGTYPE_p_GLFWwindow.getCPtr(window), xpos, ypos);
  }

  public static SWIGTYPE_p_GLFWcursor glfwCreateCursor(GLFWimage image, int xhot, int yhot) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwCreateCursor(GLFWimage.getCPtr(image), xhot, yhot);
    SWIGTYPE_p_GLFWcursor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GLFWcursor(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_GLFWcursor glfwCreateStandardCursor(int shape) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwCreateStandardCursor(shape);
    SWIGTYPE_p_GLFWcursor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GLFWcursor(cPtr, false);
    return ret;
  }

  public static void glfwDestroyCursor(SWIGTYPE_p_GLFWcursor cursor) {
    glfw3PINVOKE.glfwDestroyCursor(SWIGTYPE_p_GLFWcursor.getCPtr(cursor));
  }

  public static void glfwSetCursor(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_GLFWcursor cursor) {
    glfw3PINVOKE.glfwSetCursor(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_GLFWcursor.getCPtr(cursor));
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int_int__void glfwSetKeyCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetKeyCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int__void glfwSetCharCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetCharCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int_int__void glfwSetCharModsCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetCharModsCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_unsigned_int_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int__void glfwSetMouseButtonCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetMouseButtonCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int_int_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void glfwSetCursorPosCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetCursorPosCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int__void glfwSetCursorEnterCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetCursorEnterCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void glfwSetScrollCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetScrollCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_double_double__void(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_f_p_struct_GLFWwindow_int_p_p_q_const__char__void glfwSetDropCallback(SWIGTYPE_p_GLFWwindow window, SWIGTYPE_p_f_p_struct_GLFWwindow_int_p_p_q_const__char__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetDropCallback(SWIGTYPE_p_GLFWwindow.getCPtr(window), SWIGTYPE_p_f_p_struct_GLFWwindow_int_p_p_q_const__char__void.getCPtr(cbfun));
    SWIGTYPE_p_f_p_struct_GLFWwindow_int_p_p_q_const__char__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_struct_GLFWwindow_int_p_p_q_const__char__void(cPtr, false);
    return ret;
  }

  public static int glfwJoystickPresent(int jid) {
    int ret = glfw3PINVOKE.glfwJoystickPresent(jid);
    return ret;
  }

  public static SWIGTYPE_p_float glfwGetJoystickAxes(int jid, SWIGTYPE_p_int count) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetJoystickAxes(jid, SWIGTYPE_p_int.getCPtr(count));
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char glfwGetJoystickButtons(int jid, SWIGTYPE_p_int count) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetJoystickButtons(jid, SWIGTYPE_p_int.getCPtr(count));
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char glfwGetJoystickHats(int jid, SWIGTYPE_p_int count) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetJoystickHats(jid, SWIGTYPE_p_int.getCPtr(count));
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static string glfwGetJoystickName(int jid) {
    string ret = glfw3PINVOKE.glfwGetJoystickName(jid);
    return ret;
  }

  public static string glfwGetJoystickGUID(int jid) {
    string ret = glfw3PINVOKE.glfwGetJoystickGUID(jid);
    return ret;
  }

  public static int glfwJoystickIsGamepad(int jid) {
    int ret = glfw3PINVOKE.glfwJoystickIsGamepad(jid);
    return ret;
  }

  public static SWIGTYPE_p_f_int_int__void glfwSetJoystickCallback(SWIGTYPE_p_f_int_int__void cbfun) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwSetJoystickCallback(SWIGTYPE_p_f_int_int__void.getCPtr(cbfun));
    SWIGTYPE_p_f_int_int__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_int_int__void(cPtr, false);
    return ret;
  }

  public static int glfwUpdateGamepadMappings(string arg0) {
    int ret = glfw3PINVOKE.glfwUpdateGamepadMappings(arg0);
    return ret;
  }

  public static string glfwGetGamepadName(int jid) {
    string ret = glfw3PINVOKE.glfwGetGamepadName(jid);
    return ret;
  }

  public static int glfwGetGamepadState(int jid, GLFWgamepadstate state) {
    int ret = glfw3PINVOKE.glfwGetGamepadState(jid, GLFWgamepadstate.getCPtr(state));
    return ret;
  }

  public static void glfwSetClipboardString(SWIGTYPE_p_GLFWwindow window, string arg1) {
    glfw3PINVOKE.glfwSetClipboardString(SWIGTYPE_p_GLFWwindow.getCPtr(window), arg1);
  }

  public static string glfwGetClipboardString(SWIGTYPE_p_GLFWwindow window) {
    string ret = glfw3PINVOKE.glfwGetClipboardString(SWIGTYPE_p_GLFWwindow.getCPtr(window));
    return ret;
  }

  public static double glfwGetTime() {
    double ret = glfw3PINVOKE.glfwGetTime();
    return ret;
  }

  public static void glfwSetTime(double time) {
    glfw3PINVOKE.glfwSetTime(time);
  }

  public static SWIGTYPE_p_uint64_t glfwGetTimerValue() {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(glfw3PINVOKE.glfwGetTimerValue(), true);
    return ret;
  }

  public static SWIGTYPE_p_uint64_t glfwGetTimerFrequency() {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(glfw3PINVOKE.glfwGetTimerFrequency(), true);
    return ret;
  }

  public static void glfwMakeContextCurrent(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwMakeContextCurrent(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static SWIGTYPE_p_GLFWwindow glfwGetCurrentContext() {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetCurrentContext();
    SWIGTYPE_p_GLFWwindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GLFWwindow(cPtr, false);
    return ret;
  }

  public static void glfwSwapBuffers(SWIGTYPE_p_GLFWwindow window) {
    glfw3PINVOKE.glfwSwapBuffers(SWIGTYPE_p_GLFWwindow.getCPtr(window));
  }

  public static void glfwSwapInterval(int interval) {
    glfw3PINVOKE.glfwSwapInterval(interval);
  }

  public static int glfwExtensionSupported(string extension) {
    int ret = glfw3PINVOKE.glfwExtensionSupported(extension);
    return ret;
  }

  public static SWIGTYPE_p_f_void__void glfwGetProcAddress(string procname) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetProcAddress(procname);
    SWIGTYPE_p_f_void__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_void__void(cPtr, false);
    return ret;
  }

  public static int glfwVulkanSupported() {
    int ret = glfw3PINVOKE.glfwVulkanSupported();
    return ret;
  }

  public static SWIGTYPE_p_p_char glfwGetRequiredInstanceExtensions(SWIGTYPE_p_uint32_t count) {
    global::System.IntPtr cPtr = glfw3PINVOKE.glfwGetRequiredInstanceExtensions(SWIGTYPE_p_uint32_t.getCPtr(count));
    SWIGTYPE_p_p_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
    return ret;
  }

  public static readonly int GLFW_VERSION_MAJOR = glfw3PINVOKE.GLFW_VERSION_MAJOR_get();
  public static readonly int GLFW_VERSION_MINOR = glfw3PINVOKE.GLFW_VERSION_MINOR_get();
  public static readonly int GLFW_VERSION_REVISION = glfw3PINVOKE.GLFW_VERSION_REVISION_get();
  public static readonly int GLFW_TRUE = glfw3PINVOKE.GLFW_TRUE_get();
  public static readonly int GLFW_FALSE = glfw3PINVOKE.GLFW_FALSE_get();
  public static readonly int GLFW_RELEASE = glfw3PINVOKE.GLFW_RELEASE_get();
  public static readonly int GLFW_PRESS = glfw3PINVOKE.GLFW_PRESS_get();
  public static readonly int GLFW_REPEAT = glfw3PINVOKE.GLFW_REPEAT_get();
  public static readonly int GLFW_HAT_CENTERED = glfw3PINVOKE.GLFW_HAT_CENTERED_get();
  public static readonly int GLFW_HAT_UP = glfw3PINVOKE.GLFW_HAT_UP_get();
  public static readonly int GLFW_HAT_RIGHT = glfw3PINVOKE.GLFW_HAT_RIGHT_get();
  public static readonly int GLFW_HAT_DOWN = glfw3PINVOKE.GLFW_HAT_DOWN_get();
  public static readonly int GLFW_HAT_LEFT = glfw3PINVOKE.GLFW_HAT_LEFT_get();
  public static readonly int GLFW_HAT_RIGHT_UP = glfw3PINVOKE.GLFW_HAT_RIGHT_UP_get();
  public static readonly int GLFW_HAT_RIGHT_DOWN = glfw3PINVOKE.GLFW_HAT_RIGHT_DOWN_get();
  public static readonly int GLFW_HAT_LEFT_UP = glfw3PINVOKE.GLFW_HAT_LEFT_UP_get();
  public static readonly int GLFW_HAT_LEFT_DOWN = glfw3PINVOKE.GLFW_HAT_LEFT_DOWN_get();
  public static readonly int GLFW_KEY_UNKNOWN = glfw3PINVOKE.GLFW_KEY_UNKNOWN_get();
  public static readonly int GLFW_KEY_SPACE = glfw3PINVOKE.GLFW_KEY_SPACE_get();
  public static readonly int GLFW_KEY_APOSTROPHE = glfw3PINVOKE.GLFW_KEY_APOSTROPHE_get();
  public static readonly int GLFW_KEY_COMMA = glfw3PINVOKE.GLFW_KEY_COMMA_get();
  public static readonly int GLFW_KEY_MINUS = glfw3PINVOKE.GLFW_KEY_MINUS_get();
  public static readonly int GLFW_KEY_PERIOD = glfw3PINVOKE.GLFW_KEY_PERIOD_get();
  public static readonly int GLFW_KEY_SLASH = glfw3PINVOKE.GLFW_KEY_SLASH_get();
  public static readonly int GLFW_KEY_0 = glfw3PINVOKE.GLFW_KEY_0_get();
  public static readonly int GLFW_KEY_1 = glfw3PINVOKE.GLFW_KEY_1_get();
  public static readonly int GLFW_KEY_2 = glfw3PINVOKE.GLFW_KEY_2_get();
  public static readonly int GLFW_KEY_3 = glfw3PINVOKE.GLFW_KEY_3_get();
  public static readonly int GLFW_KEY_4 = glfw3PINVOKE.GLFW_KEY_4_get();
  public static readonly int GLFW_KEY_5 = glfw3PINVOKE.GLFW_KEY_5_get();
  public static readonly int GLFW_KEY_6 = glfw3PINVOKE.GLFW_KEY_6_get();
  public static readonly int GLFW_KEY_7 = glfw3PINVOKE.GLFW_KEY_7_get();
  public static readonly int GLFW_KEY_8 = glfw3PINVOKE.GLFW_KEY_8_get();
  public static readonly int GLFW_KEY_9 = glfw3PINVOKE.GLFW_KEY_9_get();
  public static readonly int GLFW_KEY_SEMICOLON = glfw3PINVOKE.GLFW_KEY_SEMICOLON_get();
  public static readonly int GLFW_KEY_EQUAL = glfw3PINVOKE.GLFW_KEY_EQUAL_get();
  public static readonly int GLFW_KEY_A = glfw3PINVOKE.GLFW_KEY_A_get();
  public static readonly int GLFW_KEY_B = glfw3PINVOKE.GLFW_KEY_B_get();
  public static readonly int GLFW_KEY_C = glfw3PINVOKE.GLFW_KEY_C_get();
  public static readonly int GLFW_KEY_D = glfw3PINVOKE.GLFW_KEY_D_get();
  public static readonly int GLFW_KEY_E = glfw3PINVOKE.GLFW_KEY_E_get();
  public static readonly int GLFW_KEY_F = glfw3PINVOKE.GLFW_KEY_F_get();
  public static readonly int GLFW_KEY_G = glfw3PINVOKE.GLFW_KEY_G_get();
  public static readonly int GLFW_KEY_H = glfw3PINVOKE.GLFW_KEY_H_get();
  public static readonly int GLFW_KEY_I = glfw3PINVOKE.GLFW_KEY_I_get();
  public static readonly int GLFW_KEY_J = glfw3PINVOKE.GLFW_KEY_J_get();
  public static readonly int GLFW_KEY_K = glfw3PINVOKE.GLFW_KEY_K_get();
  public static readonly int GLFW_KEY_L = glfw3PINVOKE.GLFW_KEY_L_get();
  public static readonly int GLFW_KEY_M = glfw3PINVOKE.GLFW_KEY_M_get();
  public static readonly int GLFW_KEY_N = glfw3PINVOKE.GLFW_KEY_N_get();
  public static readonly int GLFW_KEY_O = glfw3PINVOKE.GLFW_KEY_O_get();
  public static readonly int GLFW_KEY_P = glfw3PINVOKE.GLFW_KEY_P_get();
  public static readonly int GLFW_KEY_Q = glfw3PINVOKE.GLFW_KEY_Q_get();
  public static readonly int GLFW_KEY_R = glfw3PINVOKE.GLFW_KEY_R_get();
  public static readonly int GLFW_KEY_S = glfw3PINVOKE.GLFW_KEY_S_get();
  public static readonly int GLFW_KEY_T = glfw3PINVOKE.GLFW_KEY_T_get();
  public static readonly int GLFW_KEY_U = glfw3PINVOKE.GLFW_KEY_U_get();
  public static readonly int GLFW_KEY_V = glfw3PINVOKE.GLFW_KEY_V_get();
  public static readonly int GLFW_KEY_W = glfw3PINVOKE.GLFW_KEY_W_get();
  public static readonly int GLFW_KEY_X = glfw3PINVOKE.GLFW_KEY_X_get();
  public static readonly int GLFW_KEY_Y = glfw3PINVOKE.GLFW_KEY_Y_get();
  public static readonly int GLFW_KEY_Z = glfw3PINVOKE.GLFW_KEY_Z_get();
  public static readonly int GLFW_KEY_LEFT_BRACKET = glfw3PINVOKE.GLFW_KEY_LEFT_BRACKET_get();
  public static readonly int GLFW_KEY_BACKSLASH = glfw3PINVOKE.GLFW_KEY_BACKSLASH_get();
  public static readonly int GLFW_KEY_RIGHT_BRACKET = glfw3PINVOKE.GLFW_KEY_RIGHT_BRACKET_get();
  public static readonly int GLFW_KEY_GRAVE_ACCENT = glfw3PINVOKE.GLFW_KEY_GRAVE_ACCENT_get();
  public static readonly int GLFW_KEY_WORLD_1 = glfw3PINVOKE.GLFW_KEY_WORLD_1_get();
  public static readonly int GLFW_KEY_WORLD_2 = glfw3PINVOKE.GLFW_KEY_WORLD_2_get();
  public static readonly int GLFW_KEY_ESCAPE = glfw3PINVOKE.GLFW_KEY_ESCAPE_get();
  public static readonly int GLFW_KEY_ENTER = glfw3PINVOKE.GLFW_KEY_ENTER_get();
  public static readonly int GLFW_KEY_TAB = glfw3PINVOKE.GLFW_KEY_TAB_get();
  public static readonly int GLFW_KEY_BACKSPACE = glfw3PINVOKE.GLFW_KEY_BACKSPACE_get();
  public static readonly int GLFW_KEY_INSERT = glfw3PINVOKE.GLFW_KEY_INSERT_get();
  public static readonly int GLFW_KEY_DELETE = glfw3PINVOKE.GLFW_KEY_DELETE_get();
  public static readonly int GLFW_KEY_RIGHT = glfw3PINVOKE.GLFW_KEY_RIGHT_get();
  public static readonly int GLFW_KEY_LEFT = glfw3PINVOKE.GLFW_KEY_LEFT_get();
  public static readonly int GLFW_KEY_DOWN = glfw3PINVOKE.GLFW_KEY_DOWN_get();
  public static readonly int GLFW_KEY_UP = glfw3PINVOKE.GLFW_KEY_UP_get();
  public static readonly int GLFW_KEY_PAGE_UP = glfw3PINVOKE.GLFW_KEY_PAGE_UP_get();
  public static readonly int GLFW_KEY_PAGE_DOWN = glfw3PINVOKE.GLFW_KEY_PAGE_DOWN_get();
  public static readonly int GLFW_KEY_HOME = glfw3PINVOKE.GLFW_KEY_HOME_get();
  public static readonly int GLFW_KEY_END = glfw3PINVOKE.GLFW_KEY_END_get();
  public static readonly int GLFW_KEY_CAPS_LOCK = glfw3PINVOKE.GLFW_KEY_CAPS_LOCK_get();
  public static readonly int GLFW_KEY_SCROLL_LOCK = glfw3PINVOKE.GLFW_KEY_SCROLL_LOCK_get();
  public static readonly int GLFW_KEY_NUM_LOCK = glfw3PINVOKE.GLFW_KEY_NUM_LOCK_get();
  public static readonly int GLFW_KEY_PRINT_SCREEN = glfw3PINVOKE.GLFW_KEY_PRINT_SCREEN_get();
  public static readonly int GLFW_KEY_PAUSE = glfw3PINVOKE.GLFW_KEY_PAUSE_get();
  public static readonly int GLFW_KEY_F1 = glfw3PINVOKE.GLFW_KEY_F1_get();
  public static readonly int GLFW_KEY_F2 = glfw3PINVOKE.GLFW_KEY_F2_get();
  public static readonly int GLFW_KEY_F3 = glfw3PINVOKE.GLFW_KEY_F3_get();
  public static readonly int GLFW_KEY_F4 = glfw3PINVOKE.GLFW_KEY_F4_get();
  public static readonly int GLFW_KEY_F5 = glfw3PINVOKE.GLFW_KEY_F5_get();
  public static readonly int GLFW_KEY_F6 = glfw3PINVOKE.GLFW_KEY_F6_get();
  public static readonly int GLFW_KEY_F7 = glfw3PINVOKE.GLFW_KEY_F7_get();
  public static readonly int GLFW_KEY_F8 = glfw3PINVOKE.GLFW_KEY_F8_get();
  public static readonly int GLFW_KEY_F9 = glfw3PINVOKE.GLFW_KEY_F9_get();
  public static readonly int GLFW_KEY_F10 = glfw3PINVOKE.GLFW_KEY_F10_get();
  public static readonly int GLFW_KEY_F11 = glfw3PINVOKE.GLFW_KEY_F11_get();
  public static readonly int GLFW_KEY_F12 = glfw3PINVOKE.GLFW_KEY_F12_get();
  public static readonly int GLFW_KEY_F13 = glfw3PINVOKE.GLFW_KEY_F13_get();
  public static readonly int GLFW_KEY_F14 = glfw3PINVOKE.GLFW_KEY_F14_get();
  public static readonly int GLFW_KEY_F15 = glfw3PINVOKE.GLFW_KEY_F15_get();
  public static readonly int GLFW_KEY_F16 = glfw3PINVOKE.GLFW_KEY_F16_get();
  public static readonly int GLFW_KEY_F17 = glfw3PINVOKE.GLFW_KEY_F17_get();
  public static readonly int GLFW_KEY_F18 = glfw3PINVOKE.GLFW_KEY_F18_get();
  public static readonly int GLFW_KEY_F19 = glfw3PINVOKE.GLFW_KEY_F19_get();
  public static readonly int GLFW_KEY_F20 = glfw3PINVOKE.GLFW_KEY_F20_get();
  public static readonly int GLFW_KEY_F21 = glfw3PINVOKE.GLFW_KEY_F21_get();
  public static readonly int GLFW_KEY_F22 = glfw3PINVOKE.GLFW_KEY_F22_get();
  public static readonly int GLFW_KEY_F23 = glfw3PINVOKE.GLFW_KEY_F23_get();
  public static readonly int GLFW_KEY_F24 = glfw3PINVOKE.GLFW_KEY_F24_get();
  public static readonly int GLFW_KEY_F25 = glfw3PINVOKE.GLFW_KEY_F25_get();
  public static readonly int GLFW_KEY_KP_0 = glfw3PINVOKE.GLFW_KEY_KP_0_get();
  public static readonly int GLFW_KEY_KP_1 = glfw3PINVOKE.GLFW_KEY_KP_1_get();
  public static readonly int GLFW_KEY_KP_2 = glfw3PINVOKE.GLFW_KEY_KP_2_get();
  public static readonly int GLFW_KEY_KP_3 = glfw3PINVOKE.GLFW_KEY_KP_3_get();
  public static readonly int GLFW_KEY_KP_4 = glfw3PINVOKE.GLFW_KEY_KP_4_get();
  public static readonly int GLFW_KEY_KP_5 = glfw3PINVOKE.GLFW_KEY_KP_5_get();
  public static readonly int GLFW_KEY_KP_6 = glfw3PINVOKE.GLFW_KEY_KP_6_get();
  public static readonly int GLFW_KEY_KP_7 = glfw3PINVOKE.GLFW_KEY_KP_7_get();
  public static readonly int GLFW_KEY_KP_8 = glfw3PINVOKE.GLFW_KEY_KP_8_get();
  public static readonly int GLFW_KEY_KP_9 = glfw3PINVOKE.GLFW_KEY_KP_9_get();
  public static readonly int GLFW_KEY_KP_DECIMAL = glfw3PINVOKE.GLFW_KEY_KP_DECIMAL_get();
  public static readonly int GLFW_KEY_KP_DIVIDE = glfw3PINVOKE.GLFW_KEY_KP_DIVIDE_get();
  public static readonly int GLFW_KEY_KP_MULTIPLY = glfw3PINVOKE.GLFW_KEY_KP_MULTIPLY_get();
  public static readonly int GLFW_KEY_KP_SUBTRACT = glfw3PINVOKE.GLFW_KEY_KP_SUBTRACT_get();
  public static readonly int GLFW_KEY_KP_ADD = glfw3PINVOKE.GLFW_KEY_KP_ADD_get();
  public static readonly int GLFW_KEY_KP_ENTER = glfw3PINVOKE.GLFW_KEY_KP_ENTER_get();
  public static readonly int GLFW_KEY_KP_EQUAL = glfw3PINVOKE.GLFW_KEY_KP_EQUAL_get();
  public static readonly int GLFW_KEY_LEFT_SHIFT = glfw3PINVOKE.GLFW_KEY_LEFT_SHIFT_get();
  public static readonly int GLFW_KEY_LEFT_CONTROL = glfw3PINVOKE.GLFW_KEY_LEFT_CONTROL_get();
  public static readonly int GLFW_KEY_LEFT_ALT = glfw3PINVOKE.GLFW_KEY_LEFT_ALT_get();
  public static readonly int GLFW_KEY_LEFT_SUPER = glfw3PINVOKE.GLFW_KEY_LEFT_SUPER_get();
  public static readonly int GLFW_KEY_RIGHT_SHIFT = glfw3PINVOKE.GLFW_KEY_RIGHT_SHIFT_get();
  public static readonly int GLFW_KEY_RIGHT_CONTROL = glfw3PINVOKE.GLFW_KEY_RIGHT_CONTROL_get();
  public static readonly int GLFW_KEY_RIGHT_ALT = glfw3PINVOKE.GLFW_KEY_RIGHT_ALT_get();
  public static readonly int GLFW_KEY_RIGHT_SUPER = glfw3PINVOKE.GLFW_KEY_RIGHT_SUPER_get();
  public static readonly int GLFW_KEY_MENU = glfw3PINVOKE.GLFW_KEY_MENU_get();
  public static readonly int GLFW_KEY_LAST = glfw3PINVOKE.GLFW_KEY_LAST_get();
  public static readonly int GLFW_MOD_SHIFT = glfw3PINVOKE.GLFW_MOD_SHIFT_get();
  public static readonly int GLFW_MOD_CONTROL = glfw3PINVOKE.GLFW_MOD_CONTROL_get();
  public static readonly int GLFW_MOD_ALT = glfw3PINVOKE.GLFW_MOD_ALT_get();
  public static readonly int GLFW_MOD_SUPER = glfw3PINVOKE.GLFW_MOD_SUPER_get();
  public static readonly int GLFW_MOUSE_BUTTON_1 = glfw3PINVOKE.GLFW_MOUSE_BUTTON_1_get();
  public static readonly int GLFW_MOUSE_BUTTON_2 = glfw3PINVOKE.GLFW_MOUSE_BUTTON_2_get();
  public static readonly int GLFW_MOUSE_BUTTON_3 = glfw3PINVOKE.GLFW_MOUSE_BUTTON_3_get();
  public static readonly int GLFW_MOUSE_BUTTON_4 = glfw3PINVOKE.GLFW_MOUSE_BUTTON_4_get();
  public static readonly int GLFW_MOUSE_BUTTON_5 = glfw3PINVOKE.GLFW_MOUSE_BUTTON_5_get();
  public static readonly int GLFW_MOUSE_BUTTON_6 = glfw3PINVOKE.GLFW_MOUSE_BUTTON_6_get();
  public static readonly int GLFW_MOUSE_BUTTON_7 = glfw3PINVOKE.GLFW_MOUSE_BUTTON_7_get();
  public static readonly int GLFW_MOUSE_BUTTON_8 = glfw3PINVOKE.GLFW_MOUSE_BUTTON_8_get();
  public static readonly int GLFW_MOUSE_BUTTON_LAST = glfw3PINVOKE.GLFW_MOUSE_BUTTON_LAST_get();
  public static readonly int GLFW_MOUSE_BUTTON_LEFT = glfw3PINVOKE.GLFW_MOUSE_BUTTON_LEFT_get();
  public static readonly int GLFW_MOUSE_BUTTON_RIGHT = glfw3PINVOKE.GLFW_MOUSE_BUTTON_RIGHT_get();
  public static readonly int GLFW_MOUSE_BUTTON_MIDDLE = glfw3PINVOKE.GLFW_MOUSE_BUTTON_MIDDLE_get();
  public static readonly int GLFW_JOYSTICK_1 = glfw3PINVOKE.GLFW_JOYSTICK_1_get();
  public static readonly int GLFW_JOYSTICK_2 = glfw3PINVOKE.GLFW_JOYSTICK_2_get();
  public static readonly int GLFW_JOYSTICK_3 = glfw3PINVOKE.GLFW_JOYSTICK_3_get();
  public static readonly int GLFW_JOYSTICK_4 = glfw3PINVOKE.GLFW_JOYSTICK_4_get();
  public static readonly int GLFW_JOYSTICK_5 = glfw3PINVOKE.GLFW_JOYSTICK_5_get();
  public static readonly int GLFW_JOYSTICK_6 = glfw3PINVOKE.GLFW_JOYSTICK_6_get();
  public static readonly int GLFW_JOYSTICK_7 = glfw3PINVOKE.GLFW_JOYSTICK_7_get();
  public static readonly int GLFW_JOYSTICK_8 = glfw3PINVOKE.GLFW_JOYSTICK_8_get();
  public static readonly int GLFW_JOYSTICK_9 = glfw3PINVOKE.GLFW_JOYSTICK_9_get();
  public static readonly int GLFW_JOYSTICK_10 = glfw3PINVOKE.GLFW_JOYSTICK_10_get();
  public static readonly int GLFW_JOYSTICK_11 = glfw3PINVOKE.GLFW_JOYSTICK_11_get();
  public static readonly int GLFW_JOYSTICK_12 = glfw3PINVOKE.GLFW_JOYSTICK_12_get();
  public static readonly int GLFW_JOYSTICK_13 = glfw3PINVOKE.GLFW_JOYSTICK_13_get();
  public static readonly int GLFW_JOYSTICK_14 = glfw3PINVOKE.GLFW_JOYSTICK_14_get();
  public static readonly int GLFW_JOYSTICK_15 = glfw3PINVOKE.GLFW_JOYSTICK_15_get();
  public static readonly int GLFW_JOYSTICK_16 = glfw3PINVOKE.GLFW_JOYSTICK_16_get();
  public static readonly int GLFW_JOYSTICK_LAST = glfw3PINVOKE.GLFW_JOYSTICK_LAST_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_A = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_A_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_B = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_B_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_X = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_X_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_Y = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_Y_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_LEFT_BUMPER_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_BACK = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_BACK_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_START = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_START_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_GUIDE = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_GUIDE_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_LEFT_THUMB = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_LEFT_THUMB_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_RIGHT_THUMB_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_DPAD_UP = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_DPAD_UP_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_DPAD_RIGHT_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_DPAD_DOWN = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_DPAD_DOWN_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_DPAD_LEFT = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_DPAD_LEFT_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_LAST = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_LAST_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_CROSS = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_CROSS_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_CIRCLE = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_CIRCLE_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_SQUARE = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_SQUARE_get();
  public static readonly int GLFW_GAMEPAD_BUTTON_TRIANGLE = glfw3PINVOKE.GLFW_GAMEPAD_BUTTON_TRIANGLE_get();
  public static readonly int GLFW_GAMEPAD_AXIS_LEFT_X = glfw3PINVOKE.GLFW_GAMEPAD_AXIS_LEFT_X_get();
  public static readonly int GLFW_GAMEPAD_AXIS_LEFT_Y = glfw3PINVOKE.GLFW_GAMEPAD_AXIS_LEFT_Y_get();
  public static readonly int GLFW_GAMEPAD_AXIS_RIGHT_X = glfw3PINVOKE.GLFW_GAMEPAD_AXIS_RIGHT_X_get();
  public static readonly int GLFW_GAMEPAD_AXIS_RIGHT_Y = glfw3PINVOKE.GLFW_GAMEPAD_AXIS_RIGHT_Y_get();
  public static readonly int GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = glfw3PINVOKE.GLFW_GAMEPAD_AXIS_LEFT_TRIGGER_get();
  public static readonly int GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = glfw3PINVOKE.GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER_get();
  public static readonly int GLFW_GAMEPAD_AXIS_LAST = glfw3PINVOKE.GLFW_GAMEPAD_AXIS_LAST_get();
  public static readonly int GLFW_NO_ERROR = glfw3PINVOKE.GLFW_NO_ERROR_get();
  public static readonly int GLFW_NOT_INITIALIZED = glfw3PINVOKE.GLFW_NOT_INITIALIZED_get();
  public static readonly int GLFW_NO_CURRENT_CONTEXT = glfw3PINVOKE.GLFW_NO_CURRENT_CONTEXT_get();
  public static readonly int GLFW_INVALID_ENUM = glfw3PINVOKE.GLFW_INVALID_ENUM_get();
  public static readonly int GLFW_INVALID_VALUE = glfw3PINVOKE.GLFW_INVALID_VALUE_get();
  public static readonly int GLFW_OUT_OF_MEMORY = glfw3PINVOKE.GLFW_OUT_OF_MEMORY_get();
  public static readonly int GLFW_API_UNAVAILABLE = glfw3PINVOKE.GLFW_API_UNAVAILABLE_get();
  public static readonly int GLFW_VERSION_UNAVAILABLE = glfw3PINVOKE.GLFW_VERSION_UNAVAILABLE_get();
  public static readonly int GLFW_PLATFORM_ERROR = glfw3PINVOKE.GLFW_PLATFORM_ERROR_get();
  public static readonly int GLFW_FORMAT_UNAVAILABLE = glfw3PINVOKE.GLFW_FORMAT_UNAVAILABLE_get();
  public static readonly int GLFW_NO_WINDOW_CONTEXT = glfw3PINVOKE.GLFW_NO_WINDOW_CONTEXT_get();
  public static readonly int GLFW_FOCUSED = glfw3PINVOKE.GLFW_FOCUSED_get();
  public static readonly int GLFW_ICONIFIED = glfw3PINVOKE.GLFW_ICONIFIED_get();
  public static readonly int GLFW_RESIZABLE = glfw3PINVOKE.GLFW_RESIZABLE_get();
  public static readonly int GLFW_VISIBLE = glfw3PINVOKE.GLFW_VISIBLE_get();
  public static readonly int GLFW_DECORATED = glfw3PINVOKE.GLFW_DECORATED_get();
  public static readonly int GLFW_AUTO_ICONIFY = glfw3PINVOKE.GLFW_AUTO_ICONIFY_get();
  public static readonly int GLFW_FLOATING = glfw3PINVOKE.GLFW_FLOATING_get();
  public static readonly int GLFW_MAXIMIZED = glfw3PINVOKE.GLFW_MAXIMIZED_get();
  public static readonly int GLFW_CENTER_CURSOR = glfw3PINVOKE.GLFW_CENTER_CURSOR_get();
  public static readonly int GLFW_TRANSPARENT = glfw3PINVOKE.GLFW_TRANSPARENT_get();
  public static readonly int GLFW_RED_BITS = glfw3PINVOKE.GLFW_RED_BITS_get();
  public static readonly int GLFW_GREEN_BITS = glfw3PINVOKE.GLFW_GREEN_BITS_get();
  public static readonly int GLFW_BLUE_BITS = glfw3PINVOKE.GLFW_BLUE_BITS_get();
  public static readonly int GLFW_ALPHA_BITS = glfw3PINVOKE.GLFW_ALPHA_BITS_get();
  public static readonly int GLFW_DEPTH_BITS = glfw3PINVOKE.GLFW_DEPTH_BITS_get();
  public static readonly int GLFW_STENCIL_BITS = glfw3PINVOKE.GLFW_STENCIL_BITS_get();
  public static readonly int GLFW_ACCUM_RED_BITS = glfw3PINVOKE.GLFW_ACCUM_RED_BITS_get();
  public static readonly int GLFW_ACCUM_GREEN_BITS = glfw3PINVOKE.GLFW_ACCUM_GREEN_BITS_get();
  public static readonly int GLFW_ACCUM_BLUE_BITS = glfw3PINVOKE.GLFW_ACCUM_BLUE_BITS_get();
  public static readonly int GLFW_ACCUM_ALPHA_BITS = glfw3PINVOKE.GLFW_ACCUM_ALPHA_BITS_get();
  public static readonly int GLFW_AUX_BUFFERS = glfw3PINVOKE.GLFW_AUX_BUFFERS_get();
  public static readonly int GLFW_STEREO = glfw3PINVOKE.GLFW_STEREO_get();
  public static readonly int GLFW_SAMPLES = glfw3PINVOKE.GLFW_SAMPLES_get();
  public static readonly int GLFW_SRGB_CAPABLE = glfw3PINVOKE.GLFW_SRGB_CAPABLE_get();
  public static readonly int GLFW_REFRESH_RATE = glfw3PINVOKE.GLFW_REFRESH_RATE_get();
  public static readonly int GLFW_DOUBLEBUFFER = glfw3PINVOKE.GLFW_DOUBLEBUFFER_get();
  public static readonly int GLFW_CLIENT_API = glfw3PINVOKE.GLFW_CLIENT_API_get();
  public static readonly int GLFW_CONTEXT_VERSION_MAJOR = glfw3PINVOKE.GLFW_CONTEXT_VERSION_MAJOR_get();
  public static readonly int GLFW_CONTEXT_VERSION_MINOR = glfw3PINVOKE.GLFW_CONTEXT_VERSION_MINOR_get();
  public static readonly int GLFW_CONTEXT_REVISION = glfw3PINVOKE.GLFW_CONTEXT_REVISION_get();
  public static readonly int GLFW_CONTEXT_ROBUSTNESS = glfw3PINVOKE.GLFW_CONTEXT_ROBUSTNESS_get();
  public static readonly int GLFW_OPENGL_FORWARD_COMPAT = glfw3PINVOKE.GLFW_OPENGL_FORWARD_COMPAT_get();
  public static readonly int GLFW_OPENGL_DEBUG_CONTEXT = glfw3PINVOKE.GLFW_OPENGL_DEBUG_CONTEXT_get();
  public static readonly int GLFW_OPENGL_PROFILE = glfw3PINVOKE.GLFW_OPENGL_PROFILE_get();
  public static readonly int GLFW_CONTEXT_RELEASE_BEHAVIOR = glfw3PINVOKE.GLFW_CONTEXT_RELEASE_BEHAVIOR_get();
  public static readonly int GLFW_CONTEXT_NO_ERROR = glfw3PINVOKE.GLFW_CONTEXT_NO_ERROR_get();
  public static readonly int GLFW_CONTEXT_CREATION_API = glfw3PINVOKE.GLFW_CONTEXT_CREATION_API_get();
  public static readonly int GLFW_COCOA_RETINA_FRAMEBUFFER = glfw3PINVOKE.GLFW_COCOA_RETINA_FRAMEBUFFER_get();
  public static readonly int GLFW_COCOA_FRAME_AUTOSAVE = glfw3PINVOKE.GLFW_COCOA_FRAME_AUTOSAVE_get();
  public static readonly int GLFW_COCOA_GRAPHICS_SWITCHING = glfw3PINVOKE.GLFW_COCOA_GRAPHICS_SWITCHING_get();
  public static readonly int GLFW_NO_API = glfw3PINVOKE.GLFW_NO_API_get();
  public static readonly int GLFW_OPENGL_API = glfw3PINVOKE.GLFW_OPENGL_API_get();
  public static readonly int GLFW_OPENGL_ES_API = glfw3PINVOKE.GLFW_OPENGL_ES_API_get();
  public static readonly int GLFW_NO_ROBUSTNESS = glfw3PINVOKE.GLFW_NO_ROBUSTNESS_get();
  public static readonly int GLFW_NO_RESET_NOTIFICATION = glfw3PINVOKE.GLFW_NO_RESET_NOTIFICATION_get();
  public static readonly int GLFW_LOSE_CONTEXT_ON_RESET = glfw3PINVOKE.GLFW_LOSE_CONTEXT_ON_RESET_get();
  public static readonly int GLFW_OPENGL_ANY_PROFILE = glfw3PINVOKE.GLFW_OPENGL_ANY_PROFILE_get();
  public static readonly int GLFW_OPENGL_CORE_PROFILE = glfw3PINVOKE.GLFW_OPENGL_CORE_PROFILE_get();
  public static readonly int GLFW_OPENGL_COMPAT_PROFILE = glfw3PINVOKE.GLFW_OPENGL_COMPAT_PROFILE_get();
  public static readonly int GLFW_CURSOR = glfw3PINVOKE.GLFW_CURSOR_get();
  public static readonly int GLFW_STICKY_KEYS = glfw3PINVOKE.GLFW_STICKY_KEYS_get();
  public static readonly int GLFW_STICKY_MOUSE_BUTTONS = glfw3PINVOKE.GLFW_STICKY_MOUSE_BUTTONS_get();
  public static readonly int GLFW_CURSOR_NORMAL = glfw3PINVOKE.GLFW_CURSOR_NORMAL_get();
  public static readonly int GLFW_CURSOR_HIDDEN = glfw3PINVOKE.GLFW_CURSOR_HIDDEN_get();
  public static readonly int GLFW_CURSOR_DISABLED = glfw3PINVOKE.GLFW_CURSOR_DISABLED_get();
  public static readonly int GLFW_ANY_RELEASE_BEHAVIOR = glfw3PINVOKE.GLFW_ANY_RELEASE_BEHAVIOR_get();
  public static readonly int GLFW_RELEASE_BEHAVIOR_FLUSH = glfw3PINVOKE.GLFW_RELEASE_BEHAVIOR_FLUSH_get();
  public static readonly int GLFW_RELEASE_BEHAVIOR_NONE = glfw3PINVOKE.GLFW_RELEASE_BEHAVIOR_NONE_get();
  public static readonly int GLFW_NATIVE_CONTEXT_API = glfw3PINVOKE.GLFW_NATIVE_CONTEXT_API_get();
  public static readonly int GLFW_EGL_CONTEXT_API = glfw3PINVOKE.GLFW_EGL_CONTEXT_API_get();
  public static readonly int GLFW_OSMESA_CONTEXT_API = glfw3PINVOKE.GLFW_OSMESA_CONTEXT_API_get();
  public static readonly int GLFW_ARROW_CURSOR = glfw3PINVOKE.GLFW_ARROW_CURSOR_get();
  public static readonly int GLFW_IBEAM_CURSOR = glfw3PINVOKE.GLFW_IBEAM_CURSOR_get();
  public static readonly int GLFW_CROSSHAIR_CURSOR = glfw3PINVOKE.GLFW_CROSSHAIR_CURSOR_get();
  public static readonly int GLFW_HAND_CURSOR = glfw3PINVOKE.GLFW_HAND_CURSOR_get();
  public static readonly int GLFW_HRESIZE_CURSOR = glfw3PINVOKE.GLFW_HRESIZE_CURSOR_get();
  public static readonly int GLFW_VRESIZE_CURSOR = glfw3PINVOKE.GLFW_VRESIZE_CURSOR_get();
  public static readonly int GLFW_CONNECTED = glfw3PINVOKE.GLFW_CONNECTED_get();
  public static readonly int GLFW_DISCONNECTED = glfw3PINVOKE.GLFW_DISCONNECTED_get();
  public static readonly int GLFW_JOYSTICK_HAT_BUTTONS = glfw3PINVOKE.GLFW_JOYSTICK_HAT_BUTTONS_get();
  public static readonly int GLFW_COCOA_CHDIR_RESOURCES = glfw3PINVOKE.GLFW_COCOA_CHDIR_RESOURCES_get();
  public static readonly int GLFW_COCOA_MENUBAR = glfw3PINVOKE.GLFW_COCOA_MENUBAR_get();
  public static readonly int GLFW_X11_WM_CLASS_NAME = glfw3PINVOKE.GLFW_X11_WM_CLASS_NAME_get();
  public static readonly int GLFW_X11_WM_CLASS_CLASS = glfw3PINVOKE.GLFW_X11_WM_CLASS_CLASS_get();
  public static readonly int GLFW_DONT_CARE = glfw3PINVOKE.GLFW_DONT_CARE_get();
}
